import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

# Function decorator to specify function input and output
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value')
)
def get_pie_chart(entered_site):
    if entered_site == 'ALL':
        # If 'ALL' sites are selected, use all rows in the dataframe
        fig = px.pie(spacex_df, names='class', title='Success Launches for All Sites')
    else:
        # If a specific site is selected, filter the dataframe to include data for that site
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site]
        fig = px.pie(filtered_df, names='class', title=f'Success Launches for {entered_site}')

    return fig

# Function decorator to specify function input and output
@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='site-dropdown', component_property='value'), Input(component_id="payload-slider", component_property="value")]
)

def get_scatter_chart(entered_site, payload_range):
    if entered_site == 'ALL':
        # If 'ALL' sites are selected, use all rows in the dataframe
        filtered_df = spacex_df
    else:
        # If a specific site is selected, filter the dataframe to include data for that site
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site]

    # Filter the data based on the selected payload range
    filtered_df = filtered_df[(filtered_df['Payload Mass (kg)'] >= payload_range[0]) & (filtered_df['Payload Mass (kg)'] <= payload_range[1])]

    fig = px.scatter(
        filtered_df,
        x='Payload Mass (kg)',
        y='class',
        color='Booster Version Category',
        title='Payload vs. Launch Outcome with Booster Version',
        labels={'Payload Mass (kg)': 'Payload Mass (kg)', 'class': 'Launch Outcome'},
        range_y=[-0.1, 1.1]
    )

    return fig



# Create the app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # The default select value is for ALL sites
                                dcc.Dropdown(id='site-dropdown',
                                    options=[
                                        {'label': 'All Sites', 'value': 'ALL'},
                                        {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'},
                                        {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
                                        {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
                                        {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
                                    ],
                                    value='ALL',
                                    placeholder="Select a Launch Site",
                                    searchable=True
                                ),
                                dcc.RangeSlider(id='payload-slider',
                                    min=min_payload,  # Define min_payload and max_payload here
                                    max=max_payload,
                                    step=1000,
                                    marks={i: str(i) for i in range(int(min_payload), int(max_payload)+1, 1000)},
                                    value=[min_payload, max_payload],
                                ),
                                html.Br(),
                                # Other components and visualization elements go here
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# Run the app
if __name__ == '__main__':
    app.run_server()
